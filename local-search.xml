<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>10分钟搭建Cucumber框架</title>
    <link href="/shinyruotechtips/2024/01/a9e472a14e25/"/>
    <url>/shinyruotechtips/2024/01/a9e472a14e25/</url>
    
    <content type="html"><![CDATA[<h4 id="开始之前"><a href="#开始之前" class="headerlink" title="开始之前"></a>开始之前</h4><p>在我们开始之前，需要以下内容：</p><ul><li>Java SE</li><li>构建工具。此处选择：<ul><li>Maven - 版本3.3.1或更高</li><li>IntelliJ IDEA</li><li>IntelliJ IDEA Cucumber for Java 插件</li></ul></li></ul><p>首先使用cucumber-archetype Maven插件创建一个空的Cucumber项目，在要创建项目的目录下打开本地Terminal，并运行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">mvn archetype:generate <span class="hljs-string">&quot;-DarchetypeGroupId=io.cucumber&quot;</span> <span class="hljs-string">&quot;-DarchetypeArtifactId=cucumber-archetype&quot;</span> <span class="hljs-string">&quot;-DarchetypeVersion=7.15.0&quot;</span> <span class="hljs-string">&quot;-DgroupId=com.shinyruo&quot;</span>  <span class="hljs-string">&quot;-DartifactId=hellocucumber&quot;</span> <span class="hljs-string">&quot;-Dpackage=hellocucumber&quot;</span> <span class="hljs-string">&quot;-Dversion=1.0.0-SNAPSHOT&quot;</span>    <span class="hljs-string">&quot;-DinteractiveMode=false&quot;</span>如果你本地没有这个插件的话，这个命令需要运行一会儿，<br></code></pre></td></tr></table></figure><p>如果本地没有这个插件，Maven会自动下载</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">[INFO] Project created from Archetype <span class="hljs-keyword">in</span> <span class="hljs-built_in">dir</span>: &lt;directory <span class="hljs-built_in">where</span> you created the project&gt;/cucumber<br>[INFO] ------------------------------------------------------------------------<br>[INFO] BUILD SUCCESS<br>[INFO] ------------------------------------------------------------------------<br></code></pre></td></tr></table></figure><p>在IntelliJ IDEA中打开项目，运行Cucumber试试：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">mvn <span class="hljs-built_in">test</span><br></code></pre></td></tr></table></figure><p>您应该会看到类似以下的结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.141 s -- <span class="hljs-keyword">in</span> hellocucumber.RunCucumberTest<br>[INFO] <br>[INFO] Results:<br>[INFO]<br>[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0<br>[INFO]<br>[INFO] ------------------------------------------------------------------------<br>[INFO] BUILD SUCCESS<br>[INFO] ------------------------------------------------------------------------<br></code></pre></td></tr></table></figure><p>Cucumber此处运行了example.feature这个文件中给出的示例场景（Scenario）。</p><h4 id="写一个场景（Scenario）"><a href="#写一个场景（Scenario）" class="headerlink" title="写一个场景（Scenario）"></a>写一个场景（Scenario）</h4><p>在Cucumber中进行行为驱动开发时，我们使用具体的示例来指定软件应该做什么。场景在生成代码之前编写。它们开始作为可执行规范。随着生成代码的出现，场景将扮演实时文档和自动化测试的角色。</p><p>在Cucumber中，一个示例被称为场景（Scenario）。场景定义在.feature文件中，这些文件默认存储在src&#x2F;test&#x2F;resources&#x2F;hellocucumber目录（或子目录）中，当然，根据项目的需要，我们可以更改这个配置，在指定的目录下存储对应的.feature文件。比如在这个项目中，我们给RunCucumberTest加上这个注解<code>@ConfigurationParameter(key = FEATURES_PROPERTY_NAME, value = &quot;src/test/resources/features&quot;)</code>就把这个目录更改为了src&#x2F;test&#x2F;resources&#x2F;features这个目录（或子目录）。</p><p>接下来我们通过一个例子来表明应该如何写一个具体的场景。</p><p>创建一个src&#x2F;test&#x2F;resources&#x2F;features&#x2F;is_it_friday_yet.feature文件，内容如下：</p><figure class="highlight feature"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs feature"><span class="hljs-keyword">Feature</span>: Is it Friday yet?<br>  Everybody wants to know when it&#x27;s Friday<br><br>  <span class="hljs-keyword">Scenario</span>: Sunday isn&#x27;t Friday<br>    <span class="hljs-keyword">Given</span> today is Sunday<br>    <span class="hljs-keyword">When</span> I ask whether it&#x27;s Friday yet<br>    <span class="hljs-keyword">Then</span> I should be told <span class="hljs-string">&quot;Nope&quot;</span><br></code></pre></td></tr></table></figure><p>这个文件的第一行以关键字Feature:开头，后面跟着一个名称。可以使用与文件名相似的名称，或者根据业务需求对功能本身进行概括。</p><p>第二行是功能的简要描述。Cucumber不执行此行，因为它是文档&#x2F;注释的一部分。</p><p>第四行，Scenario: Sunday isn’t Friday是一个场景，它是一个具体的示例，说明在这里软件所处的状态，或者业务场景。</p><p>以Given，When和Then开头的最后三行是我们场景的步骤。这是Cucumber将执行的内容。</p><h4 id="查看报告中的未定义场景"><a href="#查看报告中的未定义场景" class="headerlink" title="查看报告中的未定义场景"></a>查看报告中的未定义场景</h4><p>现在我们有了一个场景，我们可以要求Cucumber执行它。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">mvn <span class="hljs-built_in">test</span><br></code></pre></td></tr></table></figure><p>Cucumber告诉我们有一个未定义的场景和三个未定义的步骤。它还建议一些代码片段，我们可以用这些代码片段来定义这些步骤：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs bash">Scenario: Sunday isn<span class="hljs-string">&#x27;t Friday        # src/test/resources/features/is_it_friday_yet.feature:4</span><br><span class="hljs-string">  Given today is Sunday</span><br><span class="hljs-string">  When I ask whether it&#x27;</span>s Friday yet<br>  Then I should be told <span class="hljs-string">&quot;Nope&quot;</span><br>[ERROR] Tests run: 2, Failures: 0, Errors: 1, Skipped: 0, Time elapsed: 0.142 s &lt;&lt;&lt; <span class="hljs-string">FAILURE! -- in hellocucumber.RunCucumberTest</span><br><span class="hljs-string">[ERROR] Is it Friday yet?.Sunday isn&#x27;t Friday -- Time elapsed: 0.024 s &lt;&lt;&lt; ERROR!</span><br><span class="hljs-string">io.cucumber.junit.platform.engine.UndefinedStepException:</span><br><span class="hljs-string">The step &#x27;today is Sunday&#x27; and 2 other step(s) are undefined.</span><br><span class="hljs-string">You can implement these steps using the snippet(s) below:</span><br><span class="hljs-string"></span><br><span class="hljs-string">@Given(&quot;today is Sunday&quot;)</span><br><span class="hljs-string">public void today_is_sunday() &#123;</span><br><span class="hljs-string">    // Write code here that turns the phrase above into concrete actions</span><br><span class="hljs-string">    throw new io.cucumber.java.PendingException();</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string">@When(&quot;I ask whether it&#x27;s Friday yet&quot;)</span><br><span class="hljs-string">public void i_ask_whether_it_s_friday_yet() &#123;</span><br><span class="hljs-string">    // Write code here that turns the phrase above into concrete actions</span><br><span class="hljs-string">    throw new io.cucumber.java.PendingException();</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string">@Then(&quot;I should be told &#123;string&#125;&quot;)</span><br><span class="hljs-string">public void i_should_be_told(String string) &#123;</span><br><span class="hljs-string">    // Write code here that turns the phrase above into concrete actions</span><br><span class="hljs-string">    throw new io.cucumber.java.PendingException();</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string"></span><br><span class="hljs-string">        at io.cucumber.core.runtime.TestCaseResultObserver.assertTestCasePassed(TestCaseResultObserver.java:69)</span><br><span class="hljs-string">        at io.cucumber.junit.platform.engine.TestCaseResultObserver.assertTestCasePassed(TestCaseResultObserver.java:22)</span><br><span class="hljs-string">        at io.cucumber.junit.platform.engine.CucumberEngineExecutionContext.lambda$runTestCase$4(CucumberEngineExecutionContext.java:114)</span><br><span class="hljs-string">        at io.cucumber.core.runtime.CucumberExecutionContext.lambda$runTestCase$5(CucumberExecutionContext.java:137)</span><br><span class="hljs-string">        at io.cucumber.core.runtime.RethrowingThrowableCollector.executeAndThrow(RethrowingThrowableCollector.java:23)</span><br><span class="hljs-string">        at io.cucumber.core.runtime.CucumberExecutionContext.runTestCase(CucumberExecutionContext.java:137)</span><br><span class="hljs-string">        at io.cucumber.junit.platform.engine.CucumberEngineExecutionContext.runTestCase(CucumberEngineExecutionContext.java:109)</span><br><span class="hljs-string">        at io.cucumber.junit.platform.engine.NodeDescriptor$PickleDescriptor.execute(NodeDescriptor.java:168)</span><br><span class="hljs-string">        at io.cucumber.junit.platform.engine.NodeDescriptor$PickleDescriptor.execute(NodeDescriptor.java:90)</span><br><span class="hljs-string">        at java.util.ArrayList.forEach(ArrayList.java:1259)</span><br><span class="hljs-string">        at java.util.ArrayList.forEach(ArrayList.java:1259)</span><br><span class="hljs-string"></span><br><span class="hljs-string">[INFO] </span><br><span class="hljs-string">[INFO] Results:</span><br><span class="hljs-string">[INFO]</span><br><span class="hljs-string">[ERROR] Errors: </span><br><span class="hljs-string">[ERROR]   The step &#x27;today is Sunday&#x27; and 2 other step(s) are undefined.</span><br><span class="hljs-string">You can implement these steps using the snippet(s) below:</span><br><span class="hljs-string"></span><br><span class="hljs-string">@Given(&quot;today is Sunday&quot;)</span><br><span class="hljs-string">public void today_is_sunday() &#123;</span><br><span class="hljs-string">    // Write code here that turns the phrase above into concrete actions</span><br><span class="hljs-string">    throw new io.cucumber.java.PendingException();</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string">@When(&quot;I ask whether it&#x27;s Friday yet&quot;)</span><br><span class="hljs-string">public void i_ask_whether_it_s_friday_yet() &#123;</span><br><span class="hljs-string">    // Write code here that turns the phrase above into concrete actions</span><br><span class="hljs-string">    throw new io.cucumber.java.PendingException();</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string">@Then(&quot;I should be told &#123;string&#125;&quot;)</span><br><span class="hljs-string">public void i_should_be_told(String string) &#123;</span><br><span class="hljs-string">    // Write code here that turns the phrase above into concrete actions</span><br><span class="hljs-string">    throw new io.cucumber.java.PendingException();</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string"></span><br></code></pre></td></tr></table></figure><p>复制每个未定义步骤的三个代码片段，并将它们粘贴到src&#x2F;test&#x2F;java&#x2F;hellocucumber&#x2F;stepdefs&#x2F;common&#x2F;Friday.java中。</p><p>再次运行Cucumber。这次输出有点不同：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">[ERROR] Tests run: 2, Failures: 0, Errors: 1, Skipped: 0, Time elapsed: 0.107 s &lt;&lt;&lt; <span class="hljs-string">FAILURE! -- in hellocucumber.RunCucumberTest</span><br><span class="hljs-string">[ERROR] Is it Friday yet?.Sunday isn&#x27;t Friday -- Time elapsed: 0.007 s &lt;&lt;&lt; ERROR!</span><br><span class="hljs-string">io.cucumber.java.PendingException: TODO: implement me</span><br><span class="hljs-string">        at hellocucumber.stepdefs.common.Friday.today_is_sunday(Friday.java:9)</span><br><span class="hljs-string"></span><br></code></pre></td></tr></table></figure><p>Cucumber找到了我们的步骤定义并执行了它们。它们当前标记为挂起，这意味着我们需要使它们做一些有用的事情，也就是对这些step进行实现。</p><h4 id="查看报告中的失败-x2F-通过场景"><a href="#查看报告中的失败-x2F-通过场景" class="headerlink" title="查看报告中的失败&#x2F;通过场景"></a>查看报告中的失败&#x2F;通过场景</h4><p>下一步是按步骤定义中的注释所示做一些事情：</p><p>“&#x2F;&#x2F; Write code here that turns the phrase above into concrete actions”</p><p>将步骤定义代码src&#x2F;test&#x2F;java&#x2F;com&#x2F;shinyruo&#x2F;hellocucumber&#x2F;stepdefs&#x2F;common&#x2F;Friday.java更改为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.shinyruo.hellocucumber.stepdefs.common;<br><br><span class="hljs-keyword">import</span> io.cucumber.java.en.*;<br><span class="hljs-keyword">import</span> <span class="hljs-keyword">static</span> org.junit.jupiter.api.Assertions.assertEquals;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Friday</span> &#123;<br>    <span class="hljs-keyword">private</span> String today;<br>    <span class="hljs-keyword">private</span> String actualAnswer;<br><br>    <span class="hljs-keyword">static</span> String <span class="hljs-title function_">isItFriday</span><span class="hljs-params">(String today)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Given(&quot;today is Sunday&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">today_is_Sunday</span><span class="hljs-params">()</span> &#123;<br>        today = <span class="hljs-string">&quot;Sunday&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@When(&quot;I ask whether it&#x27;s Friday yet&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">i_ask_whether_it_s_Friday_yet</span><span class="hljs-params">()</span> &#123;<br>        actualAnswer = isItFriday(today);<br>    &#125;<br><br>    <span class="hljs-meta">@Then(&quot;I should be told &#123;string&#125;&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">i_should_be_told</span><span class="hljs-params">(String expectedAnswer)</span> &#123;<br>        assertEquals(expectedAnswer, actualAnswer);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>再次运行Cucumber：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">[ERROR] Is it Friday yet?.Sunday isn<span class="hljs-string">&#x27;t Friday -- Time elapsed: 0.009 s &lt;&lt;&lt; FAILURE!</span><br><span class="hljs-string">org.opentest4j.AssertionFailedError: expected: &lt;Nope&gt; but was: &lt;null&gt;</span><br><span class="hljs-string">        at com.shinyruo.hellocucumber.stepdefs.common.Friday.i_should_be_told(Friday.java:26)</span><br><span class="hljs-string">        at ?.I should be told &quot;Nope&quot;</span><br></code></pre></td></tr></table></figure><p>前两个步骤通过了，但是最后一个步骤失败了。很明显，这是因为我们的方法中返回了null，我们把它改成Nope：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">static</span> String <span class="hljs-title function_">isItFriday</span><span class="hljs-params">(String today)</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Nope&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>再次运行Cucumber：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs bash">[INFO] Running com.shinyruo.hellocucumber.RunCucumberTest<br><br>Scenario: The example                       <span class="hljs-comment"># src/test/resources/features/example.feature:3</span><br>  Given an example scenario                 <span class="hljs-comment"># com.shinyruo.hellocucumber.stepdefs.common.StepDefinitions.anExampleScenario()</span><br>  When all step definitions are implemented <span class="hljs-comment"># com.shinyruo.hellocucumber.stepdefs.common.StepDefinitions.allStepDefinitionsAreImplemented()</span><br>  Then the scenario passes                  <span class="hljs-comment"># com.shinyruo.hellocucumber.stepdefs.common.StepDefinitions.theScenarioPasses()</span><br><br>Scenario: Sunday isn<span class="hljs-string">&#x27;t Friday        # src/test/resources/features/is_it_friday_yet.feature:4</span><br><span class="hljs-string">  Given today is Sunday              # com.shinyruo.hellocucumber.stepdefs.common.Friday.today_is_Sunday()</span><br><span class="hljs-string">  When I ask whether it&#x27;</span>s Friday yet <span class="hljs-comment"># com.shinyruo.hellocucumber.stepdefs.common.Friday.i_ask_whether_it_s_Friday_yet()</span><br>  Then I should be told <span class="hljs-string">&quot;Nope&quot;</span>       <span class="hljs-comment"># com.shinyruo.hellocucumber.stepdefs.common.Friday.i_should_be_told(java.lang.String)</span><br>[INFO] Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.100 s -- <span class="hljs-keyword">in</span> com.shinyruo.hellocucumber.RunCucumberTest<br>[INFO] <br>[INFO] Results:<br>[INFO]<br>[INFO] Tests run: 2, Failures: 0, Errors: 0, Skipped: 0<br>[INFO]<br>[INFO] ------------------------------------------------------------------------<br>[INFO] BUILD SUCCESS<br>[INFO] ------------------------------------------------------------------------<br></code></pre></td></tr></table></figure><p>现在，我们的用例就都是通过状态了。</p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>总之，我们现在有了一个非常简陋的cucumber框架，更复杂的场景以及与其他测试工具的集成我们可以后边逐步实现。</p>]]></content>
    
    
    
    <tags>
      
      <tag>RTFM</tag>
      
      <tag>Cucumber</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>北美科技公司对工程技术角色的区分</title>
    <link href="/shinyruotechtips/2024/01/72ac063e860c/"/>
    <url>/shinyruotechtips/2024/01/72ac063e860c/</url>
    
    <content type="html"><![CDATA[<p>科普一下北美科技公司对工程技术角色的区分，比如 EM(Engineering Manager)、TPM (Technical Program Manager) 都代表什么意思，分工有什么不同？</p><p>通常北美的工程技术相关的职业分成以下五个类别：</p><ul><li>开发工程师 SE &#x2F; SDE(Software Engineer &#x2F; Software Development Engineer)</li><li>工程经理 EM &#x2F; SDM(Engineering Manager &#x2F; Software Development Manager)</li><li>技术主管 TL &#x2F; TLM (Tech Lead &#x2F; Tech Lead Manager)</li><li>技术项目经理 TPM (Technical Program Manager)</li><li>产品经理 PM (Product Manager)</li></ul><p>这些角色之间的差别很难描述，知名技术专栏 The Pragmatic Engineer 的作者，前 Uber 的工程经理 Gergely Orosz 写过一篇文章：《<a href="https://newsletter.pragmaticengineer.com/p/engineering-leadership-skillset-overlaps">Engineering Leadership Skill Set Overlaps</a>》，从三个维度来区分这些角色之间的差别，相对比较准确客观。</p><p><img src="/shinyruotechtips/imgs/%E5%8C%97%E7%BE%8E%E7%A7%91%E6%8A%80%E5%85%AC%E5%8F%B8%E5%AF%B9%E5%B7%A5%E7%A8%8B%E6%8A%80%E6%9C%AF%E8%A7%92%E8%89%B2%E7%9A%84%E5%8C%BA%E5%88%86/2024-01-23-16-27-27-image.png"></p><p>这三个维度分别是：</p><ul><li>战略对齐：明确组织的愿景、使命和战略；与团队工作在一起，保持战略上的一致，避免资源上的浪费；保持各团队之间信息通畅，处理好团队之间的依赖关系，让团队一起协作。</li><li>人员管理：确保团队健康，帮助团队成员成长，推动团队的执行。</li><li>软件开发：与生成产品代码直接相关的工作，比如系统设计、编码、代码审查、部署、监控等等。</li></ul><p>虽然这三个维度不足以覆盖各个工程角色中的所有活动（比如行政、招聘），但确实可以很好的用可视化的方式来区分各个工程角色的差别。</p><p>让我们具体看一下各个角色的主要工作职责：</p><h4 id="开发工程师-SE-x2F-SDE-Software-Engineer-x2F-Software-Development-Engineer"><a href="#开发工程师-SE-x2F-SDE-Software-Engineer-x2F-Software-Development-Engineer" class="headerlink" title="开发工程师 SE &#x2F; SDE(Software Engineer &#x2F; Software Development Engineer)"></a>开发工程师 SE &#x2F; SDE(Software Engineer &#x2F; Software Development Engineer)</h4><ul><li>开发工程师主要以技术开发为主</li><li>资深的工程师会参与一些跨团队的协作，以及指导新手工程师</li><li>不会涉及人员管理</li></ul><h4 id="工程经理-EM-x2F-SDM-Engineering-Manager-x2F-Software-Development-Manager"><a href="#工程经理-EM-x2F-SDM-Engineering-Manager-x2F-Software-Development-Manager" class="headerlink" title="工程经理 EM &#x2F; SDM(Engineering Manager &#x2F; Software Development Manager)"></a>工程经理 EM &#x2F; SDM(Engineering Manager &#x2F; Software Development Manager)</h4><ul><li>工程经理则以人员管理为主，要花大量时间在团队建设和帮助员工成长上面</li><li>需要将组织的战略和团队以及团队成员对齐，确保团队做的事情和部门或公司的目标是一致的</li><li>要和产品经理、技术项目经理协作，参与项目管理，设定项目目标，制定项目计划，推动项目进展</li><li>软件开发相关的工作占比极少，通常只是参与技术决策和代码审查，即使参与开发也不应负责关键模块，否则容易成为团队瓶颈</li></ul><h4 id="技术主管-TL-x2F-TLM-Tech-Lead-x2F-Tech-Lead-Manager"><a href="#技术主管-TL-x2F-TLM-Tech-Lead-x2F-Tech-Lead-Manager" class="headerlink" title="技术主管 TL &#x2F; TLM (Tech Lead &#x2F; Tech Lead Manager)"></a>技术主管 TL &#x2F; TLM (Tech Lead &#x2F; Tech Lead Manager)</h4><ul><li>技术主管会直接参与开发，和工程师相比比例要低一些，还要帮助团队做出技术决策</li><li>技术主管有少量的人员管理职责，以技术指导为主，一般不会涉及绩效、人事相关</li><li>技术主管会和产品经理协作推动项目进展，偏项目执行层面</li></ul><h4 id="技术项目经理-TPM-Technical-Program-Manager"><a href="#技术项目经理-TPM-Technical-Program-Manager" class="headerlink" title="技术项目经理 TPM (Technical Program Manager)"></a>技术项目经理 TPM (Technical Program Manager)</h4><ul><li>技术项目经理主要职责是管理推动跨多个团队的大型复杂项目</li><li>通常不涉及人员管理，除非是资深的 TPM 下面还带 TPM</li><li>要花大量时间和 stakeholders（利益相关方）沟通协作，从而推动项目进展</li></ul><h4 id="产品经理-PM-Product-Manager"><a href="#产品经理-PM-Product-Manager" class="headerlink" title="产品经理 PM (Product Manager)"></a>产品经理 PM (Product Manager)</h4><ul><li><p>产品经理需要将组织的战略转化成产品设计</p></li><li><p>产品经理需要花大量时间和 SDE、EM、TPM 一起协作，确保产品设计能被理解和执行</p></li><li><p>产品经理通常不涉及人员管理，除非是资深产品经理或产品总监，有直接下属</p></li><li><p>职责和角色的对应关系</p></li></ul><p>除了上面说的软件开发、战略对齐和人员管理三种维度，还有一种更简单直接的区分方法是按照职责来划分，将职责划分成：项目管理 (Project Management)、人员管理 (People Management) 和技术 (Technical Leadership) 三部分。</p><ul><li><strong>工程经理（EM）</strong> 以人员管理为主，但是也会兼顾一部分的技术和项目管理</li><li><strong>技术主管（TL）</strong> 以技术为主，兼顾少量项目管理和人员管理</li><li><strong>项目经理（TPM）</strong> 以项目管理为主，不怎么参与人员管理和技术</li></ul><p>以上就是通常北美的大型科技公司在技术公司工程团队中各个角色的介绍，以及区分。</p><h3 id="不同的体量的公司中各个角色分别负责什么？"><a href="#不同的体量的公司中各个角色分别负责什么？" class="headerlink" title="不同的体量的公司中各个角色分别负责什么？"></a>不同的体量的公司中各个角色分别负责什么？</h3><p>不同的公司由于团队规模不一样，所以角色划分也有所不同，上面的划分主要是针对大型科技公司的组织架构来划分的角色，对于中小公司其实没有那么细。比如创业公司老板什么都做，中小型公司没有 TPM（技术项目经理），只有大公司才会有专门的 TPM 去组织管理跨多个团队的项目。</p><p>如果我们把一个项目按照 WWHWW 拆分：</p><ul><li><strong>Why？</strong> 为什么要做？</li><li><strong>What？</strong> 项目的目标是什么？做成什么样？</li><li><strong>How？</strong> 项目要如何完成？技术方案、系统架构是什么？</li><li><strong>When？</strong> 项目何时可以交付？Roadmap 和计划是什么？</li><li><strong>Who？</strong> 安排谁来做这个项目？</li></ul><p>那么通常产品经理（PM）是负责解决 Why 和 What 的，解释清楚为什么要立项，要做成什么样。也就是我们通常说的立项和项目需求。</p><p>在确定需求后，工程经理（EM）就要负责去评估时间（When），安排人手（Who），和团队的工程师一起做出技术方案（How）并推动项目完成。通常 EM 只负责本团队的项目。</p><p>在大公司，一些复杂的项目需要多个团队一起协作，这种情况下单靠 PM 和 EM 是不够的，所以这时候通常会需要技术项目经理（TPM）的帮助，对于跨团队的大项目，TPM 和 PM 以及各个团队的 EM 一起协作，定义好 Roadmap（When），任务分解到各个团队（Who），解决项目中的问题，推动项目的执行。</p>]]></content>
    
    
    
    <tags>
      
      <tag>ReadingList</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Markdown Syntax Guide</title>
    <link href="/shinyruotechtips/2024/01/c5d07596ae69/"/>
    <url>/shinyruotechtips/2024/01/c5d07596ae69/</url>
    
    <content type="html"><![CDATA[<p>This article offers a sample of basic Markdown syntax.</p><h1 id="Titles"><a href="#Titles" class="headerlink" title="Titles"></a>Titles</h1><p>As we started writing a markdown document, we need to add a title and some sub-headers.</p><p>Markdown supports two styles of headers, Setext and atx.</p><p>Setext-style headers are “underlined” using equal signs (for first-level headers) and dashes (for second-level headers). For example:</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-section">This is an H1</span><br><span class="hljs-section">=============</span><br><br><span class="hljs-section">This is an H2</span><br><span class="hljs-section">-------------</span><br></code></pre></td></tr></table></figure><p>Any number of underlining &#x3D;’s or -’s will work.</p><p>Atx-style headers use 1-6 hash characters at the start of the line, corresponding to header levels 1-6. For example:</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-section"># This is an H1</span><br><br><span class="hljs-section">## This is an H2</span><br><br><span class="hljs-section">###### This is an H6</span><br></code></pre></td></tr></table></figure><p>Optionally, you may “close” atx-style headers. This is purely cosmetic — you can use this if you think it looks better. The closing hashes don’t even need to match the number of hashes used to open the header. (The number of opening hashes determines the header level.) :</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-section"># This is an H1 #</span><br><br><span class="hljs-section">## This is an H2 ##</span><br><br><span class="hljs-section">### This is an H3 ######</span><br></code></pre></td></tr></table></figure><h1 id="Tables"><a href="#Tables" class="headerlink" title="Tables"></a>Tables</h1><p>Tables aren’t part of the core Markdown spec, but they are part of GFM (GitHub Markdown) and Markdown Here supports them.</p><p>Here is an example of table with the output below:</p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs gherkin">|<span class="hljs-string"> Tables        </span>|<span class="hljs-string"> Are           </span>|<span class="hljs-string"> Cool  </span>|<br>|<span class="hljs-string"> ------------- </span>|<span class="hljs-string">:-------------:</span>|<span class="hljs-string"> -----:</span>|<br>|<span class="hljs-string"> col 3 is      </span>|<span class="hljs-string"> right-aligned </span>|<span class="hljs-string"> $1600 </span>|<br>|<span class="hljs-string"> col 2 is      </span>|<span class="hljs-string"> centered      </span>|<span class="hljs-string">   $12 </span>|<br>|<span class="hljs-string"> zebra stripes </span>|<span class="hljs-string"> are neat      </span>|<span class="hljs-string">    $1 </span>|<br></code></pre></td></tr></table></figure><table><thead><tr><th>Tables</th><th align="center">Are</th><th align="right">Cool</th></tr></thead><tbody><tr><td>col 3 is</td><td align="center">right-aligned</td><td align="right">$1600</td></tr><tr><td>col 2 is</td><td align="center">centered</td><td align="right">$12</td></tr><tr><td>zebra stripes</td><td align="center">are neat</td><td align="right">$1</td></tr></tbody></table><p>Colons can be used to align columns.</p><p>The outer pipes (|) are optional, and you don’t need to make the raw Markdown line up prettily. You can also use inline Markdown.</p><p>Example:</p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs gherkin">Markdown |<span class="hljs-string"> Less </span>|<span class="hljs-string"> Pretty</span><br><span class="hljs-string">--- </span>|<span class="hljs-string"> --- </span>|<span class="hljs-string"> ---</span><br><span class="hljs-string">*Still* </span>|<span class="hljs-string"> `renders` </span>|<span class="hljs-string"> **nicely**</span><br><span class="hljs-string">1 </span>|<span class="hljs-string"> 2 </span>|<span class="hljs-string"> 3</span><br></code></pre></td></tr></table></figure><h1 id="Links"><a href="#Links" class="headerlink" title="Links"></a>Links</h1><p>Markdown supports two styles of links: inline and reference.</p><p>In both styles, the link text is delimited by [square brackets].</p><p>To create an inline link, use a set of regular parentheses immediately after the link text’s closing square bracket. Inside the parentheses, put the URL where you want the link to point, along with an optional title for the link, surrounded in quotes. For example:</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs markdown">[<span class="hljs-string">I&#x27;m an inline-style link</span>](<span class="hljs-link">https://www.google.com</span>)<br><br>[<span class="hljs-string">I&#x27;m an inline-style link with title</span>](<span class="hljs-link">https://www.google.com &quot;Google&#x27;s Homepage&quot;</span>)<br><br>[<span class="hljs-string">I&#x27;m a reference-style link</span>][<span class="hljs-symbol">arbitrary case-insensitive reference text</span>]<br><br>[<span class="hljs-string">I&#x27;m a relative reference to a repository file</span>](<span class="hljs-link">../blob/master/LICENSE</span>)<br></code></pre></td></tr></table></figure><p>Reference-style links use a second set of square brackets, inside which you place a label of your choosing to identify the link:</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">This is [<span class="hljs-string">an example</span>][<span class="hljs-symbol">id</span>] reference-style link.<br></code></pre></td></tr></table></figure><p>You can optionally use a space to separate the sets of brackets:</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">This is [an example] [id] reference-style link.<br></code></pre></td></tr></table></figure><p>Then, anywhere in the document, you define your link label like this, on a line by itself:</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">[<span class="hljs-symbol">id</span>]: <span class="hljs-link">http://example.com/ &quot;Optional Title Here&quot;</span><br></code></pre></td></tr></table></figure><p><strong>GitHub</strong> and <strong>GitBook</strong> supports URL autolinking. They will autolink standard URLs, so if you want to link to a URL (instead of setting link text), you can simply enter the URL and it will be turned into a link to that URL.</p><h1 id="Images"><a href="#Images" class="headerlink" title="Images"></a>Images</h1><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-section"># Inline</span><br><br>![<span class="hljs-string">Alternative text</span>](<span class="hljs-link">/path/to/img.jpg &quot;Optional title&quot;</span>)<br><br><span class="hljs-section"># Reference</span><br><br>![<span class="hljs-string">Alternative text</span>][<span class="hljs-symbol">id</span>]<br>[<span class="hljs-symbol">id</span>]: <span class="hljs-link">url/to/image &quot;Optional title&quot;</span><br></code></pre></td></tr></table></figure><p>As you may have noticed, images in Markdown are very similar to links. The difference is that:</p><ul><li>the square brackets must be prefixed with an exclamation mark and</li><li>inside they may have some alternative text. A description of the image, which is displayed if the image can’t be loaded.</li></ul><h1 id="Code-Blocks"><a href="#Code-Blocks" class="headerlink" title="Code Blocks"></a>Code Blocks</h1><p>Pre-formatted code blocks are used for writing about programming or markup source code. Rather than forming normal paragraphs, the lines of a code block are interpreted literally.</p><p>Here is an example:</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">This is a code block<br></code></pre></td></tr></table></figure><p>To produce a code block in Markdown, simply indent every line of the block by at least 4 spaces or 1 tab.</p><p>For example:</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown">This is a normal paragraph:<br><br><span class="hljs-code">    This is a code block.</span><br></code></pre></td></tr></table></figure><p>You can also create code block separated by:</p><pre><code class="hljs"><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs clean"><br>### Inline <span class="hljs-keyword">code</span> blocks<br><br>Inline <span class="hljs-keyword">code</span> blocks can be written using: `<br><br>For example:<br><br>    This is a `<span class="hljs-keyword">inline</span> <span class="hljs-keyword">code</span> block`<br><br>### Syntax highlighting<br><br>You can define the language to be used for syntax highlighting by adding the name on the opening tag. Example:<br><br>    ```javascript<br>    var a = &#123;&#125;;<br></code></pre></td></tr></table></figure></code></pre>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
